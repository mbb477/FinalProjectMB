---
title: "Exploratory Data Analysis of the Diabetes Health Indicators Set"
author: "Melanie Beebe"
format: html
editor: visual
---

# Introduction

The Behavioral Risk Factor Surveillance System (BRFSS) is a system run by the Centers for Disease Control and Prevention (CDC) that uses telephone surveys to collect health-related information from individuals in the United States every year. The system began in 1984 and collects more than 400,000 responses each year. The Diabetes Health Indicators Dataset that will be discussed here is a subset of the data obtained from the BRFSS for 2015. This data set contains 21 of the original 330 variables and 253.680 of the 441,455 original responses. Retention of the 21 variables in this data was based on what was believed to have potential relevance for diabetes.

The goal of this document is to use exploratory data analysis (EDA) to understand the data through validation, examining missingness, cleaning up the data and investigating distributions. This information can also help us decide what variables to include in our model. The end goal of this project is to obtain the best model to predict diabetes. Details of the EDA are presented below. The response variable is Diabetes_binary, where 0 indicates that the individual does not have diabetes and 1 means the individual has prediabetes or diabetes. The variables chosen to be included in the modeling process are ....... body mass index (BMI).....

# EDA Analysis

The first step is to read in the data. Since the data is a csv file, this can be done using read_csv() from tidyverse.

```{r}
#| warning: false
#| message: false
library(tidyverse)
library(psych)
library(caret)
diabetes_data <- read_csv("diabetes_binary_health_indicators_BRFSS2015.csv")
diabetes_data
unique_values <- unique(diabetes_data$Income)
unique_values

```

The first data step in EDA is to check for missing values. This data was already cleaned so missing values are not expected. Using is.na() shows that there are in fact no missing values.

```{r}
colSums(is.na(diabetes_data))

```

The distinct() function can be used to verify that there are no missing values in a form other than NA. Looking at the output below, we can see that there is nothing unusual. Most of the categories have 0's and 1's which generally correspond to no (0) and yes(1), with the exception of Fruits, Veggies and Sex. The categories with other numbers have various meanings depending on the category but the numbers are consistent with what is expected based on the [kaggle website's Diabetes Health Indicators Dataset Notebook](https://www.kaggle.com/code/alexteboul/diabetes-health-indicators-dataset-notebook).

```{r}
unique_values <- diabetes_data |>
  distinct()
unique_values



```

The next step is to summarize the variables. The simplest method for doing so is to use describe() from the psych package. Below is the summary for this data. Nothing appears out of the ordinary in the summary. As we would expect, most have a minimum of 0 and a maximum of 1. BMI, MentHlth and PhysHlth are the only variables that are truly numeric and this is reflected in the summary.

```{r}
describe(diabetes_data)

```

For the most of the data, since it is categorical, we can look at contingency tables to get an idea of their relationship with diabetes status. For this purpose, the data is going to be manipulated first. The categorical variables will be converted to factors and the levels renamed to better communicate what the levels actually mean. For this purpose, factor() will be use as it allows renaming of levels and specifying if a factor is ordered, as some of the categories are.

```{r}
diabetes <- diabetes_data |>
  mutate(Diabetes_binary = as.factor(Diabetes_binary),
         Education = factor(Education, ordered = TRUE, levels = c(1:6),
                            labels = c("No School", "Primary and Lower Secondary", "Some High School", 
                                       "Graduated High School", "Some College", "Graduated College")),
         Age = factor(Age,ordered = TRUE, levels = c(1:13), 
                       labels = c("18-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54", "55-59", 
                                  "60-64", "65-69", "70-74", "75-79", "80+")),
         Income = factor(Income, ordered = TRUE, levels = c(1:8),
                         labels = c("less than 10K", "10K to < 15K","15K to < 20K",
                                    "20K to < 25K", "25K to < 35K","35K to < 50K", 
                                    "50K to < 75K","75k or more")),
         Sex = factor(Sex, levels = c(0, 1), labels = c("Female", "Male")),
         DiffWalk = factor(DiffWalk, levels = c(0, 1), labels = c("No", "Yes")),
         NoDocbcCost = factor(NoDocbcCost, levels = c(0, 1), labels = c("No", "Yes")),
         AnyHealthcare = factor(AnyHealthcare, levels = c(0, 1), labels = c("No", "Yes")),
         HvyAlcoholConsump = factor(HvyAlcoholConsump, levels = c(0, 1), labels = c("No", "Yes")),
         PhysActivity = factor(PhysActivity, levels = c(0, 1), labels = c("No", "Yes")),
         HeartDiseaseorAttack = factor(HeartDiseaseorAttack, levels = c(0, 1), labels = c("No", "Yes")),
         Stroke = factor(Stroke, levels = c(0, 1), labels = c("No", "Yes")),
         Smoker = factor(Smoker, levels = c(0, 1), labels = c("No", "Yes")),
         CholCheck = factor(CholCheck, levels = c(0, 1), labels = c("No", "Yes")),
         HighBP = factor(HighBP, levels = c(0, 1), labels = c("No", "Yes")),
         HighChol = factor(HighChol, levels = c(0, 1), labels = c("No", "Yes")),
         Fruits = factor(Fruits, levels = c(0, 1), labels = c("None", ">= 1/day")),
         Veggies = factor(Veggies, levels = c(0, 1), labels = c("None", ">= 1/day"))
         )
diabetes

```

Now that the data is properly formatted, contingency tables can be generated. The distribition of males and females appears to be relatively similar, with males appearing to have a slightly higher propensity to have prediabetes or diabetes compared to women. Because the difference amounts to less than a few percent, this variable will be excluded from the modeling process.

```{r}
diabetes_data |>
  group_by(Sex, Diabetes_binary) |>
  summarize(count = n(), .groups = "drop") |>
  pivot_wider(names_from = Diabetes_binary, values_from = count)

```

In looking at income, the prevalence of diabetes generally decreases as income increases, indicating that socioeconomic status may be an important predictor of diabetes. This variable will be included in the model fitting process.

```{r}
diabetes_data |>
  group_by(Income, Diabetes_binary) |>
  summarize(count = n(), .groups = "drop") |>
  pivot_wider(names_from = Diabetes_binary, values_from = count)

```

We can look at the distribution of BMI in this data by examining a histogram. The distribution is relatively normal with some right skew. Since the data is unbalanced, with more respondents not having diabetes, the skewed portion of the histogram likely corresponds to individuals with diabetes. Generally speaking, a BMI between 18.5-24.9 corresponds to a normal weight.

```{r}
ggplot(data = diabetes_data, aes(BMI)) +
  geom_histogram(binwidth = 2, fill = "darksalmon", color = "black") +
  labs(y = "Count")

```
